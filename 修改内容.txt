以函数/方法/类为基本修改单位
只列出实际修改的模块，整个模块新增、删除、修改
整个模块完全输出，不要只输出模块一部分


现在提出需求：
1.将章节分割内容合并到阶段1中，但分割和摘要2个步骤不要一次处理；章节分割中“保存配置”和“检测编码”按钮有控件重合，解决这个问题
2.阶段2添加手动分块方法弥补自动分块上的不足，2个功能：要能在自动分块上做修改，要能全部手动处理
3.将ui主界面大小调整为1600*990，各个控件做相应大小、位置调整，特别关注tab页内的
4.检查各个阶段的生成文件名，以免生成文件无法输入下一阶段输入，如阶段1的输出与阶段2要求的输入文件名不同
5.现在更换4个阶段的内容（章节分割仍然合并到阶段1），分别为单章解析、事件构建、因果链扩展、全文整断；提示词及输入输出要求如下：
阶段1：
# 输入：单个章节文本 
# 输出：章节元数据JSON

prompt = """
你是一位专业的小说分析师，请严格按以下格式解析当前章节：
{
  "chapter_id": int,        # 当前章节序号
  "core_event": "60-80字核心事件描述(含场景/关键动作/直接后果)",
  "key_actors": [
    {
      "name": "角色名",
      "role": "主角/主要反派/重要配角/次要配角",
      "action": "40字行为描述(动机+行为+结果)",
      "impact_scope": "个人/团体/世界观"
    }
  ],
  "conflict": {
    "type": "人际/内心/环境/社会", 
    "intensity": 1-5,        # 1=轻微摩擦 5=生死危机
    "resolution": "完全解决/部分解决/未解决"
  },
  "tags": ["伏笔","转折","世界观","成长","情感","战斗","解谜"],
  "foreshadowing": [{
    "element": "物品/对话/事件",
    "content": "具体伏笔内容",
    "implied_future": "暗示的发展方向"
  }],
  "connections": {
    "previous": "与前一章的关联点(若无填'无')",
    "next": "对后续章节的预期影响"
  }
}
要求：
1. core_event必须包含：场景特征(如'暴雨夜的废弃教堂')、关键动作(如'破解古老机关')、直接后果(如'触发隐藏通道')
2. 每章至少标注2个关键行动者(主角必须包含)
3. foreshadowing字段需明确标注伏笔元素和暗示内容
4. connections需建立章节间逻辑桥梁
"""
阶段2：
# 输入：当前章节元数据 + 已有事件块列表
# 输出：更新后的事件块列表JSON

prompt = """
基于新章节数据和已有事件块，动态更新事件块模型：
{
  "updated_blocks": [
    {
      "block_id": "EBx",
      "chapters": [int],     # 更新后的章节列表
      "block_type": ["主线推进","支线探索","人物弧光"],
      "core_objective": "30字核心目标描述",
      "dramatic_arc": {
        "rising_action": "40字上升行动",
        "climax": "40字高潮点",
        "falling_action": "40字回落行动"
      },
      "character_development": [{
        "name": "角色名",
        "change_type": "认知/能力/关系/信念",
        "change_desc": "40字具体变化"
      }],
      "status": "进行中/已完结"  # 新增状态标记
    }
  ],
  "new_block": null or {
    # 当新章无法合并时创建新块(格式同上)
  }
}
合并规则：
1. 优先合并到满足以下条件的块：
   - status=进行中
   - 当前章与块末章连续
   - 核心目标一致(相似度>70%)
2. 创建新块条件：
   - 新章开启全新故事线
   - 与现有块目标差异>50%
   - 主要角色变更
3. 完结块条件：
   - 核心目标达成
   - 主要冲突完全解决
   - 连续2章无关联
"""
阶段3：
# 输入：当前事件块 + 已有因果链
# 输出：更新后的因果链JSON

prompt = """
根据新事件块扩展因果链模型：
{
  "updated_chain": [
    {
      "node_id": "Nx",
      "causal_relationship": {
        "antecedent": "50字前置条件",
        "catalyst": "30字直接诱因",
        "consequence": "50字后续影响"
      },
      "thematic_significance": {
        "surface": "生存/复仇/爱情", 
        "philosophical": "自由意志/道德困境"
      },
      "weight": {
        "plot": 1-10,
        "character": 1-10
      }
    }
  ],
  "new_nodes": [{
    # 新增节点(格式同上)
  }],
  "modified_relations": [{
    "from_node": "Nx",
    "to_node": "Ny",
    "relation_type": "强化/削弱/转化"
  }]
}
扩展规则：
1. 新增节点条件：
   - 改变三个及以上主要角色关系
   - 导致核心目标本质性转变
   - 揭露世界观核心设定
2. 权重更新规则：
   plot_impact = (影响角色数×0.3) + (后果持久度×0.7)
   character_impact = (改变深度×0.6) + (情感强度×0.4)
3. 关系修改条件：
   - 新事件推翻原有因果关系
   - 补充中间环节
   - 揭示隐藏关联
"""
阶段4：
# 输入：当前完整状态(章节元数据+事件块+因果链)
# 输出：诊断报告更新部分JSON

prompt = """
基于当前完整状态生成诊断增量报告：
{
  "structural_updates": {
    "new_act_assignments": [{
      "block_id": "EBx",
      "new_act": "开端/发展/高潮"
    }],
    "pacing_alerts": [{
      "chapter_range": "X-Y",
      "issue": "拖沓(连续3章冲突强度<2)/过载(连续2章冲突强度>4)",
      "suggestion": "压缩描写/增加支线"
    }]
  },
  "theme_updates": {
    "emerging_themes": ["新出现主题"],
    "theme_conflicts": ["新发现矛盾点"]
  },
  "foreshadowing_updates": {
    "resolved": [{
      "setup_chapter": int,
      "payoff_block": "EBx",
      "consistency": "高/中/低"
    }],
    "new_risks": [{
      "element": "未回收伏笔",
      "criticality": "高/中/低",
      "max_tolerable_ch": int
    }]
  },
  "character_updates": [{
    "name": "角色名",
    "inconsistencies": ["新发现性格矛盾"],
    "arc_progress": "当前成长阶段"
  }]
}
诊断规则：
1. 幕结构重分配条件：
   - 事件块权重变化>30%
   - 新增关键转折点
2. 伏笔回收检测：
   - 匹配阶段1的foreshadowing元素
   - 在后续章节有明确呼应
3. 角色一致性检查：
   - 对比不同事件块中的行为模式
   - 检测动机连续性
"""
6.整理全部需求，优化代码逻辑、排序，删掉合并赘余代码，做好代码模块管理
7.输出全部代码，不要只输出在原代码上修改的内容（无法做到定位），一次输出不完可多次输出